<?php

/**
 * Test class for GateKeeper.
 * Generated by PHPUnit on 2011-10-04 at 23:07:18.
 */
class GateKeeperTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var GateKeeper
	 * 
	 */
	private $data = array();
	private $post;
	private $tables;

	/**
	 * @var integer
	 */
	public function __construct() {
		$this->initTables();
		//$this->printTestAssumptions();
		$this->setUpOnce();
	}

	private function initTables() {
		$this->tables = array(
				"news", "event",
		);
	}

	private function printTestAssumptions() {
		echo "GateKeeperTest: ";
		if (Yii::app()->user->isGuest) {
			echo "Tester for gjester" . PHP_EOL;
		} else {
			echo "Tester for bruker: " . Yii::app()->user->name . PHP_EOL;
			echo "VIKTIG: antar at brukeren kun har accesstilgang id 52 og 56" . PHP_EOL . PHP_EOL;
		}
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUpOnce() {


		foreach ($this->tables as $type) {
			$className = ucfirst($type);
			$this->data[$type] = array();
			$this->insert($type, "allow", array());
			$this->insert($type, "deny", array(
					rand(0, 10000),
					rand(0, 10000),
					rand(0, 10000),
					rand(0, 10000),
					3238746,
			));

			$this->insert($type, "52", array(
					52
			));

			$this->insert($type, "52,56", array(
					52, 56
			));

			$this->insert($type, "52,1000", array(
					52, 1000
			));
		}
	}

	public function insert($type, $name, array $access) {
		$className = ucwords($type);
		$this->post = new $className;

		$this->post->insert();
		$this->data[$type][$name] = $this->post->id;
		$accessRelation = new AccessRelation($this->post);
		$accessRelation->set($access);
		$accessRelation->insert();

	}

	public function login() {
		$user = 381;
		$pass = null;
		$identity = new InnsidaIdentity($user);

		$identity->authenticate();
		Yii::app()->user->login($identity);
	}
	
	public function testLoggedIn() {
		
		if (Yii::app()->user->isGuest) {
			$this->markTestIncomplete("Couldn't test because user was not logged in");
			return;
		}
		

		foreach ($this->tables as $type) {
			$this->assertTrue(GateKeeper::hasAccess($type, $this->data[$type]["allow"]));
			$this->assertFalse(GateKeeper::hasAccess($type, $this->data[$type]["deny"]));


			$this->assertTrue(GateKeeper::hasAccess($type, $this->data[$type]["52"]));
			$this->assertTrue(GateKeeper::hasAccess($type, $this->data[$type]["52,56"]));
			$this->assertFalse(GateKeeper::hasAccess($type, $this->data[$type]["52,1000"]));
		}
	}

	public function testLoggedOut() {
		if (!Yii::app()->user->isGuest) {
			$this->markTestIncomplete("Couldn't test because user was logged in");
			return;
		}


		foreach ($this->tables as $type) {

			$this->assertTrue(GateKeeper::hasAccess($type, $this->data[$type]["allow"]));
			$this->assertFalse(GateKeeper::hasAccess($type, $this->data[$type]["deny"]));

			$this->assertFalse(GateKeeper::hasAccess($type, $this->data[$type]["52"]));
			$this->assertFalse(GateKeeper::hasAccess($type, $this->data[$type]["52,56"]));
			$this->assertFalse(GateKeeper::hasAccess($type, $this->data[$type]["52,1000"]));
		}
	}

}
